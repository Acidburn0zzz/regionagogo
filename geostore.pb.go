// Code generated by protoc-gen-go.
// source: geostore.proto
// DO NOT EDIT!

/*
Package regionagogo is a generated protocol buffer package.

It is generated from these files:
	geostore.proto

It has these top-level messages:
	GeoDataStorage
	RegionStorage
	CPoint
	CellIDLoopStorage
*/
package regionagogo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GeoData is used to store (as on disk) geo data
// it's the root container for the indexes
type GeoDataStorage struct {
	Rs []*RegionStorage     `protobuf:"bytes,1,rep,name=rs" json:"rs,omitempty"`
	Cl []*CellIDLoopStorage `protobuf:"bytes,2,rep,name=cl" json:"cl,omitempty"`
}

func (m *GeoDataStorage) Reset()                    { *m = GeoDataStorage{} }
func (m *GeoDataStorage) String() string            { return proto.CompactTextString(m) }
func (*GeoDataStorage) ProtoMessage()               {}
func (*GeoDataStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GeoDataStorage) GetRs() []*RegionStorage {
	if m != nil {
		return m.Rs
	}
	return nil
}

func (m *GeoDataStorage) GetCl() []*CellIDLoopStorage {
	if m != nil {
		return m.Cl
	}
	return nil
}

// RegionStorage is used to represent a region in storage
type RegionStorage struct {
	Id        uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Points    []*CPoint         `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	Data      map[string]string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cellunion []uint64          `protobuf:"varint,4,rep,packed,name=cellunion" json:"cellunion,omitempty"`
}

func (m *RegionStorage) Reset()                    { *m = RegionStorage{} }
func (m *RegionStorage) String() string            { return proto.CompactTextString(m) }
func (*RegionStorage) ProtoMessage()               {}
func (*RegionStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegionStorage) GetPoints() []*CPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *RegionStorage) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// CPoint represent a coordinates lat & lng
type CPoint struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=lat" json:"lat,omitempty"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng" json:"lng,omitempty"`
}

func (m *CPoint) Reset()                    { *m = CPoint{} }
func (m *CPoint) String() string            { return proto.CompactTextString(m) }
func (*CPoint) ProtoMessage()               {}
func (*CPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// CellIDLoopStorage is used to build the tree index in memory
type CellIDLoopStorage struct {
	Cell  uint64  `protobuf:"varint,1,opt,name=cell" json:"cell,omitempty"`
	Loops []int64 `protobuf:"varint,2,rep,packed,name=loops" json:"loops,omitempty"`
}

func (m *CellIDLoopStorage) Reset()                    { *m = CellIDLoopStorage{} }
func (m *CellIDLoopStorage) String() string            { return proto.CompactTextString(m) }
func (*CellIDLoopStorage) ProtoMessage()               {}
func (*CellIDLoopStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*GeoDataStorage)(nil), "regionagogo.GeoDataStorage")
	proto.RegisterType((*RegionStorage)(nil), "regionagogo.RegionStorage")
	proto.RegisterType((*CPoint)(nil), "regionagogo.CPoint")
	proto.RegisterType((*CellIDLoopStorage)(nil), "regionagogo.CellIDLoopStorage")
}

func init() { proto.RegisterFile("geostore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x69, 0x5a, 0x0b, 0x9d, 0xc5, 0xa2, 0xa3, 0x87, 0xb2, 0x88, 0x48, 0xf1, 0xb0, 0xa8,
	0xf4, 0xa0, 0x07, 0x17, 0xc1, 0x93, 0x2b, 0x22, 0x78, 0x90, 0xf8, 0x0b, 0x62, 0x37, 0x84, 0x62,
	0xc8, 0x94, 0x36, 0x2b, 0xec, 0x8f, 0xf5, 0xbf, 0x98, 0xa4, 0x65, 0xb5, 0x88, 0xb7, 0x97, 0xd7,
	0xef, 0x4d, 0x5e, 0x27, 0x90, 0x2b, 0x49, 0xbd, 0xa5, 0x4e, 0x56, 0x6d, 0x47, 0x96, 0x70, 0xd6,
	0x49, 0xd5, 0x90, 0x11, 0x8a, 0x14, 0x95, 0x1a, 0xf2, 0x27, 0x49, 0x2b, 0x61, 0xc5, 0x9b, 0x43,
	0x84, 0x92, 0x78, 0x01, 0xac, 0xeb, 0x8b, 0xe8, 0x2c, 0x5e, 0xcc, 0xae, 0xe7, 0xd5, 0x2f, 0xb6,
	0xe2, 0x41, 0x8f, 0x1c, 0x77, 0x14, 0x56, 0xc0, 0x6a, 0x5d, 0xb0, 0xc0, 0x9e, 0x4e, 0xd8, 0x07,
	0xa9, 0xf5, 0xf3, 0xea, 0x85, 0xa8, 0xdd, 0xf1, 0xb5, 0x2e, 0xbf, 0x22, 0xd8, 0x9f, 0x4c, 0xc1,
	0x1c, 0x58, 0xb3, 0x76, 0xb7, 0x45, 0x8b, 0x84, 0x3b, 0x85, 0x97, 0x90, 0xb6, 0xd4, 0x18, 0xdb,
	0x8f, 0x53, 0x8f, 0xa6, 0x53, 0x5f, 0xfd, 0x37, 0x3e, 0x22, 0xb8, 0x84, 0x64, 0xed, 0x9a, 0x17,
	0x71, 0x40, 0xcf, 0xff, 0x2f, 0x5b, 0xf9, 0x1f, 0x7c, 0x34, 0xb6, 0xdb, 0xf2, 0x90, 0xc0, 0x13,
	0xc8, 0x6a, 0xd7, 0x70, 0x63, 0x1c, 0x53, 0x24, 0x2e, 0x9e, 0xf0, 0x1f, 0x63, 0x7e, 0x0b, 0xd9,
	0x2e, 0x80, 0x07, 0x10, 0x7f, 0xc8, 0x6d, 0xa8, 0x98, 0x71, 0x2f, 0xf1, 0x18, 0xf6, 0x3e, 0x85,
	0xde, 0x48, 0x57, 0xd1, 0x7b, 0xc3, 0xe1, 0x8e, 0x2d, 0xa3, 0xf2, 0x0a, 0xd2, 0xa1, 0xa2, 0x4f,
	0x69, 0x61, 0x43, 0x8a, 0x71, 0x2f, 0x83, 0x63, 0x54, 0xc8, 0x78, 0xc7, 0xa8, 0xf2, 0x1e, 0x0e,
	0xff, 0xac, 0x09, 0x11, 0x12, 0x5f, 0x64, 0x5c, 0x49, 0xd0, 0xfe, 0x42, 0xed, 0x90, 0x61, 0x27,
	0x31, 0x1f, 0x0e, 0xef, 0x69, 0x78, 0xce, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xbc,
	0x4a, 0x46, 0xe0, 0x01, 0x00, 0x00,
}
